{"mappings":"YAWgBA,ECiBDC,EAyDKC,EACNC,EACOC,gHArFrB,MAAMC,EAAgB,gLAEhBC,EAAa,IAAMD,EAAN,gOACbE,EAAY,IAAIC,OAAO,IAAMF,EAAa,KAuBhDL,EAAkB,SAASQ,GACzB,YAAoB,IAANA,GAwDhBP,EAhBqB,SAASQ,EAASC,EAAgBC,GACrD,IAAIC,EAAa,GACjB,IAAKH,EACH,OAAOC,EAGT,IAAK,IAAIG,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,SACNE,IAAtBN,EAAQE,EAAME,IAChBD,EAAWD,EAAME,IAAMJ,EAAQE,EAAME,IAErCD,EAAWD,EAAME,IAAMH,EAAeC,EAAME,IAGhD,OAAOD,GAITV,EA/De,SAASc,GACtB,MAAMC,EAAQX,EAAUY,KAAKF,GAC7B,QAAM,MAAGC,IA8DXd,EAhFsB,SAASa,EAAQG,GACrC,MAAMC,EAAU,GAChB,IAAIH,EAAQE,EAAMD,KAAKF,QAChBC,GAAO,CACZ,MAAMI,EAAa,GACnBA,EAAWC,WAAaH,EAAMI,UAAYN,EAAM,GAAGH,OACnD,MAAMU,EAAMP,EAAMH,OAClB,IAAK,IAAIW,EAAQ,EAAGA,EAAQD,EAAKC,IAC/BJ,EAAWK,KAAKT,EAAMQ,IAExBL,EAAQM,KAAKL,GACbJ,EAAQE,EAAMD,KAAKF,GAErB,OAAOI,GDhBT,MAAMO,EAAiB,CACrBC,wBAAwB,GAGpBC,EAAQ,CAAC,mCAqLNC,EAAaC,GACpB,MAAgB,MAATA,GAAyB,OAATA,GAA0B,OAATA,GAA2B,OAATA,EAMzD,SACMC,EAAOC,EAASpB,GACvB,MAAMqB,EAAQrB,EACd,KAAOA,EAAIoB,EAAQnB,OAAQD,IACzB,GAAkB,KAAdoB,EAAQpB,IAA2B,KAAdoB,EAAQpB,GAAW,CAE1C,MAAMsB,EAAUF,EAAQG,OAAOF,EAAOrB,EAAIqB,GAC1C,GAAIrB,EAAI,GAAiB,QAAZsB,EACX,OAAOE,EAAe,aAAc,6DAA8DC,EAAyBL,EAASpB,IAC/H,GAAkB,KAAdoB,EAAQpB,IAA+B,KAAlBoB,EAAQpB,EAAI,GAAW,CAErDA,IACA,MAEA,SAIN,OAAOA,WAGA0B,EAAoBN,EAASpB,GACpC,GAAIoB,EAAQnB,OAASD,EAAI,GAAwB,MAAnBoB,EAAQpB,EAAI,IAAiC,MAAnBoB,EAAQpB,EAAI,IAElE,IAAKA,GAAK,EAAGA,EAAIoB,EAAQnB,OAAQD,IAC/B,GAAmB,MAAfoB,EAAQpB,IAAiC,MAAnBoB,EAAQpB,EAAI,IAAiC,MAAnBoB,EAAQpB,EAAI,GAAY,CAC1EA,GAAK,EACL,YAGC,GACLoB,EAAQnB,OAASD,EAAI,GACF,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,GACZ,CACA,IAAI2B,EAAqB,EACzB,IAAK3B,GAAK,EAAGA,EAAIoB,EAAQnB,OAAQD,IAC/B,GAAmB,MAAfoB,EAAQpB,GACV2B,SACK,GAAmB,MAAfP,EAAQpB,KACjB2B,IAC2B,IAAvBA,GACF,WAID,GACLP,EAAQnB,OAASD,EAAI,GACF,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,IACO,MAAnBoB,EAAQpB,EAAI,GAEZ,IAAKA,GAAK,EAAGA,EAAIoB,EAAQnB,OAAQD,IAC/B,GAAmB,MAAfoB,EAAQpB,IAAiC,MAAnBoB,EAAQpB,EAAI,IAAiC,MAAnBoB,EAAQpB,EAAI,GAAY,CAC1EA,GAAK,EACL,MAKN,OAAOA,EA9PTd,EAAmB,SAAUkC,EAASxB,GACpCA,EAAUR,EAAkBQ,EAASkB,EAAgBE,GAKrD,MAAMY,EAAO,GACb,IAAIC,GAAW,EAGXC,GAAc,EAEC,WAAfV,EAAQ,KAEVA,EAAUA,EAAQG,OAAO,IAG3B,IAAK,IAAIvB,EAAI,EAAGA,EAAIoB,EAAQnB,OAAQD,IAElC,GAAmB,MAAfoB,EAAQpB,IAA+B,MAAjBoB,EAAQpB,EAAE,IAGlC,GAFAA,GAAG,EACHA,EAAImB,EAAOC,EAAQpB,GACfA,EAAE+B,IAAK,OAAO/B,MACd,CAAA,GAAmB,MAAfoB,EAAQpB,GAsIX,CACL,GAAKiB,EAAaG,EAAQpB,IACxB,SAEF,OAAOwB,EAAe,cAAe,SAASJ,EAAQpB,GAAG,qBAAsByB,EAAyBL,EAASpB,IA1IrF,CAG5B,IAAIgC,EAAchC,EAGlB,GAFAA,IAEmB,MAAfoB,EAAQpB,GAAY,CACtBA,EAAI0B,EAAoBN,EAASpB,GACjC,SACK,CACL,IAAIiC,GAAa,EACE,MAAfb,EAAQpB,KAEViC,GAAa,EACbjC,KAGF,IAAIkC,EAAU,GACd,KAAOlC,EAAIoB,EAAQnB,QACF,MAAfmB,EAAQpB,IACO,MAAfoB,EAAQpB,IACO,OAAfoB,EAAQpB,IACO,OAAfoB,EAAQpB,IACO,OAAfoB,EAAQpB,GAAaA,IAErBkC,GAAWd,EAAQpB,GAWrB,GATAkC,EAAUA,EAAQC,OAGkB,MAAhCD,EAAQA,EAAQjC,OAAS,KAE3BiC,EAAUA,EAAQE,UAAU,EAAGF,EAAQjC,OAAS,GAEhDD,MA8UDX,EA5UoB6C,GAAU,CAC7B,IAAIG,EAMJ,OAJEA,EAD4B,IAA1BH,EAAQC,OAAOlC,OACX,2BAEA,QAAQiC,EAAQ,wBAEjBV,EAAe,aAAca,EAAKZ,EAAyBL,EAASpB,IAG7E,MAAMsC,EAASC,EAAiBnB,EAASpB,GACzC,IAAe,IAAXsC,EACF,OAAOd,EAAe,cAAe,mBAAmBU,EAAQ,qBAAsBT,EAAyBL,EAASpB,IAE1H,IAAIwC,EAAUF,EAAOG,MAGrB,GAFAzC,EAAIsC,EAAO1B,MAEyB,MAAhC4B,EAAQA,EAAQvC,OAAS,GAAY,CAEvC,MAAMyC,EAAe1C,EAAIwC,EAAQvC,OACjCuC,EAAUA,EAAQJ,UAAU,EAAGI,EAAQvC,OAAS,GAChD,MAAM0C,EAAUC,EAAwBJ,EAAS5C,GACjD,IAAgB,IAAZ+C,EAOF,OAAOnB,EAAemB,EAAQZ,IAAIc,KAAMF,EAAQZ,IAAIM,IAAKZ,EAAyBL,EAASsB,EAAeC,EAAQZ,IAAIe,OANtHjB,GAAW,OAQR,GAAII,EAAY,CACrB,IAAKK,EAAOS,UACV,OAAOvB,EAAe,aAAc,gBAAgBU,EAAQ,iCAAkCT,EAAyBL,EAASpB,IAC3H,GAAIwC,EAAQL,OAAOlC,OAAS,EACjC,OAAOuB,EAAe,aAAc,gBAAgBU,EAAQ,+CAAgDT,EAAyBL,EAASY,IACzI,CACL,MAAMgB,EAAMpB,EAAKqB,MACjB,GAAIf,IAAYc,EAAId,QAAS,CAC3B,IAAIgB,EAAUzB,EAAyBL,EAAS4B,EAAIhB,aACpD,OAAOR,EAAe,aACpB,yBAAyBwB,EAAId,QAAQ,qBAAqBgB,EAAQJ,KAAK,SAASI,EAAQC,IAAI,6BAA6BjB,EAAQ,KACjIT,EAAyBL,EAASY,IAInB,GAAfJ,EAAK3B,SACP6B,GAAc,QAGb,CACL,MAAMa,EAAUC,EAAwBJ,EAAS5C,GACjD,IAAgB,IAAZ+C,EAIF,OAAOnB,EAAemB,EAAQZ,IAAIc,KAAMF,EAAQZ,IAAIM,IAAKZ,EAAyBL,EAASpB,EAAIwC,EAAQvC,OAAS0C,EAAQZ,IAAIe,OAI9H,IAAoB,IAAhBhB,EACF,OAAON,EAAe,aAAc,sCAAuCC,EAAyBL,EAASpB,IAE7G4B,EAAKf,KAAK,SAACqB,cAASF,IAEtBH,GAAW,EAKb,IAAK7B,IAAKA,EAAIoB,EAAQnB,OAAQD,IAC5B,GAAmB,MAAfoB,EAAQpB,GAAY,CACtB,GAAuB,MAAnBoB,EAAQpB,EAAI,GAAY,CAE1BA,IACAA,EAAI0B,EAAoBN,EAASpB,GACjC,SACK,GAAqB,MAAjBoB,EAAQpB,EAAE,GAInB,MAFA,GADAA,EAAImB,EAAOC,IAAWpB,GAClBA,EAAE+B,IAAK,OAAO/B,OAIf,GAAmB,MAAfoB,EAAQpB,GAAY,CAC7B,MAAMoD,EAAWC,EAAkBjC,EAASpB,GAC5C,IAAgB,GAAZoD,EACF,OAAO5B,EAAe,cAAe,4BAA6BC,EAAyBL,EAASpB,IACtGA,EAAIoD,OAEJ,IAAoB,IAAhBtB,IAAyBb,EAAaG,EAAQpB,IAChD,OAAOwB,EAAe,aAAc,wBAAyBC,EAAyBL,EAASpB,IAIlF,MAAfoB,EAAQpB,IACVA,MAWR,OAAK6B,EAEoB,GAAfD,EAAK3B,OACJuB,EAAe,aAAc,iBAAiBI,EAAK,GAAGM,QAAQ,KAAMT,EAAyBL,EAASQ,EAAK,GAAGI,gBAC/GJ,EAAK3B,OAAS,IACbuB,EAAe,aAAc,YAChC8B,KAAKC,UAAU3B,EAAK4B,KAAIC,GAAKA,EAAEvB,UAAU,KAAM,GAAGwB,QAAO,SAAW,IACpE,WAAY,CAACZ,KAAM,EAAGK,IAAK,IAN1B3B,EAAe,aAAc,sBAAuB,IAkG5D,SACMe,EAAiBnB,EAASpB,GACjC,IAAIwC,EAAU,GACVmB,EAAY,GACZZ,GAAY,EAChB,KAAO/C,EAAIoB,EAAQnB,OAAQD,IAAK,CAC9B,GAbgB,MAaZoB,EAAQpB,IAZI,MAYkBoB,EAAQpB,GACtB,KAAd2D,EACFA,EAAYvC,EAAQpB,GACX2D,IAAcvC,EAAQpB,KAG/B2D,EAAY,SAET,GAAmB,MAAfvC,EAAQpB,IACC,KAAd2D,EAAkB,CACpBZ,GAAY,EACZ,MAGJP,GAAWpB,EAAQpB,GAErB,MAAkB,KAAd2D,GAIG,CACLlB,MAAOD,EACP5B,MAAOZ,EACP+C,UAAWA,GAOf,MAAMa,EAAoB,IAAIlE,OAAO,0DAA2D,cAIvFkD,EAAwBJ,EAAS5C,GAKxC,MAAMW,EAAUjB,EAAmBkD,EAASoB,GACtCC,EAAY,GAElB,IAAK,IAAI7D,EAAI,EAAGA,EAAIO,EAAQN,OAAQD,IAAK,CACvC,GAA6B,IAAzBO,EAAQP,GAAG,GAAGC,OAEhB,OAAOuB,EAAe,cAAe,cAAcjB,EAAQP,GAAG,GAAG,8BAA+B8D,EAAqBvD,EAAQP,KACxH,QAAsBE,IAAlBK,EAAQP,GAAG,KAAqBJ,EAAQmB,uBAEjD,OAAOS,EAAe,cAAe,sBAAsBjB,EAAQP,GAAG,GAAG,oBAAqB8D,EAAqBvD,EAAQP,KAK7H,MAAM+D,EAAWxD,EAAQP,GAAG,GAC5B,IAAKgE,EAAiBD,GACpB,OAAOvC,EAAe,cAAe,cAAcuC,EAAS,wBAAyBD,EAAqBvD,EAAQP,KAEpH,GAAK6D,EAAUI,eAAeF,GAI5B,OAAOvC,EAAe,cAAe,cAAcuC,EAAS,iBAAkBD,EAAqBvD,EAAQP,KAF3G6D,EAAUE,GAAY,EAM1B,OAAO,WAkBAV,EAAkBjC,EAASpB,GAGlC,GAAmB,MAAfoB,IADJpB,GAEE,OAAO,EACT,GAAmB,MAAfoB,EAAQpB,GAEV,gBAtB6BoB,EAASpB,GACxC,IAAIkE,EAAE,KAKN,IAJmB,MAAf9C,EAAQpB,KACVA,IACAkE,EAAE,cAEGlE,EAAIoB,EAAQnB,OAAQD,IAAK,CAC9B,GAAmB,MAAfoB,EAAQpB,GACV,OAAOA,EACT,IAAKoB,EAAQpB,GAAGI,MAAM8D,GACpB,MAEJ,OAAO,EAUEC,CAAwB/C,IAD/BpB,GAGF,IAAIoE,EAAQ,EACZ,KAAOpE,EAAIoB,EAAQnB,OAAQD,IAAKoE,IAC9B,KAAIhD,EAAQpB,GAAGI,MAAK,OAAUgE,EAAQ,IAAtC,CAEA,GAAmB,MAAfhD,EAAQpB,GACV,MACF,OAAO,EAET,OAAOA,WAGAwB,EAAeqB,EAAMwB,EAASC,GACrC,MAAO,CACLvC,IAAK,CACHc,KAAMA,EACNR,IAAKgC,EACLvB,KAAMwB,EAAWxB,MAAQwB,EACzBnB,IAAKmB,EAAWnB,eAKba,EAAiBD,GACxB,OAAO1E,EAAY0E,YAUZtC,EAAyBL,EAASR,GACzC,MAAM2D,EAAQnD,EAAQgB,UAAU,EAAGxB,GAAO4D,MAAK,SAC/C,MAAO,CACL1B,KAAMyB,EAAMtE,OAGZkD,IAAKoB,EAAMA,EAAMtE,OAAS,GAAGA,OAAS,YAKjC6D,EAAqB1D,GAC5B,OAAOA,EAAMK,WAAaL,EAAM,GAAGH,aEjarC,MAAMwE,EAAiB,CACnBC,eAAe,EACfC,oBAAqB,KACrBC,qBAAqB,EACrBC,aAAc,QACdC,kBAAkB,EAClBC,gBAAgB,EAChBhE,wBAAwB,EAExBiE,eAAe,EACfC,qBAAqB,EACrBC,YAAY,EACZC,cAAc,EACdC,mBAAoB,CAClBC,KAAK,EACLC,cAAc,GAEhBC,kBAAmB,SAASrD,EAASsD,GACnC,OAAOA,GAETC,wBAAyB,SAAS1B,EAAUyB,GAC1C,OAAOA,GAETE,UAAW,GACXC,sBAAsB,EACtBC,QAAO,KAAQ,GAGbC,EAAQ,CACV,gBACA,sBACA,sBACA,eACA,mBACA,iBACA,yBACA,gBACA,sBACA,aACA,eACA,oBACA,0BACA,qBACA,YACA,uBACA,iBAKiB,SAASjG,GAC1B,OAAOR,EAAkBQ,EAAS6E,EAAgBoB,SC9BtDC,oBAnBcxE,GACVyE,KAAKzE,QAAUA,EACfyE,KAAKC,MAAQ,GACbD,KAAKE,SAAW,GAElBC,IAAIC,EAAIX,GAENO,KAAKC,MAAMnF,KAAM,EAAEsF,GAAMX,IAE3BY,SAASC,GACJA,EAAKJ,UAAYK,OAAOC,KAAKF,EAAKJ,UAAUhG,OAAS,EACtD8F,KAAKC,MAAMnF,KAAM,EAAGwF,EAAK/E,SAAU+E,EAAKL,MAAOQ,WAAYH,EAAKJ,WAEhEF,KAAKC,MAAMnF,KAAM,EAAGwF,EAAK/E,SAAU+E,EAAKL,mBChB9C,MAAMS,EAAQ,wBACRC,EAAQ,8EAIRC,EAAW,CACbtB,KAAO,EACPC,cAAc,EACdsB,aAAc,KAyClBC,WArCkBC,EAAKlH,EAAU,IAS7B,GADAA,EAAU0G,OAAOS,OAAO,GAAIJ,EAAU/G,IAClCkH,GAAsB,iBAARA,EAAmB,OAAOA,EAE5C,IAAIE,EAAcF,EAAI3E,OAEtB,QAAwBjC,IAArBN,EAAQqH,UAA0BrH,EAAQqH,SAASC,KAAKF,GAAa,OAAOF,EAC1E,GAAIlH,EAAQyF,KAAOoB,EAASS,KAAKF,GAClC,OAAOG,OAAOC,SAASJ,EAAY,IAKlC,CAED,MAAM5G,EAAQsG,EAASrG,KAAK2G,GAC5B,GAAG5G,EAAM,CACYA,EAAM,GAAvB,MACMkF,EAAelF,EAAM,GACrBiH,EAAMjH,EAAM,GACAA,EAAM,IAAMA,EAAM,GACpC,OAA2B,IAAxBkF,EAAarF,QAA2B,MAAXoH,EAAI,GAAmBF,OAAOL,IACrDlH,EAAQ0F,cAAgBA,EAAarF,OAAS,EAAU6G,EACrDK,OAAOH,GAEnB,OAAOF,ICrCjB,wFACCpD,QAAO,QJgFWlE,+YI1DlB,SACM8H,EAAW9B,EAAK5F,EAASsC,EAASqF,EAAOC,EAAUC,EAAeC,GACzE,QAAYxH,IAARsF,IACE5F,EAAQsF,aAAesC,IACzBhC,EAAMA,EAAIrD,QAETqD,EAAIvF,OAAS,GAAE,CAChB,MAAM0H,EAAS/H,EAAQ2F,kBAAkBrD,EAASsD,EAAK+B,EAAOE,EAAeC,GAC7E,GAAGC,MAAAA,EAED,OAAOnC,EACH,UAAUmC,UAAkBnC,GAAOmC,IAAWnC,EAElD,OAAOmC,EACH,GAAG/H,EAAQsF,WACf,OAAO0C,EAAYpC,EAAK5F,EAAQoF,cAAepF,EAAQwF,oBAGvD,OADmBI,EAAIrD,SACLqD,EACToC,EAAYpC,EAAK5F,EAAQoF,cAAepF,EAAQwF,oBAEhDI,YAORqC,EAAiBvG,EAAS1B,GACjC,GAAIA,EAAQmF,eAAgB,CAC1B,MAAMnD,EAAON,EAAQkD,MAAM,KACrBsD,EAA+B,MAAtBxG,EAAQyG,OAAO,GAAa,IAAM,GACjD,GAAgB,UAAZnG,EAAK,GACP,MAAO,GAEW,IAAhBA,EAAK3B,SACPqB,EAAUwG,EAASlG,EAAK,IAG5B,OAAON,WAGAsG,EAAYpC,EAAKwC,EAAapI,GACrC,GAAIoI,GAA8B,iBAARxC,EAAkB,CAE1C,MAAMmC,EAASnC,EAAIrD,OACnB,MAAc,SAAXwF,GACgB,UAAXA,GACId,EAASrB,EAAK5F,GAE1B,OAAIT,EAAaqG,GACRA,EAEA,IArER2B,OAAOC,UAAYa,OAAOb,WAC7BD,OAAOC,SAAWa,OAAOb,WAEtBD,OAAOe,YAAcD,OAAOC,aAC/Bf,OAAOe,WAAaD,OAAOC,YAwE7B,MAAMC,EAAY,IAAIzI,OAAO,+CAAgD,eAEpE0I,EAAmB5F,EAAS+E,EAAO3H,GAC1C,IAAKA,EAAQkF,kBAAuC,iBAAZtC,EAAsB,CAI5D,MAAMjC,EAAUjB,EAAmBkD,EAAS2F,GACtCxH,EAAMJ,EAAQN,OACdoI,EAAQ,GACd,IAAK,IAAIrI,EAAI,EAAGA,EAAIW,EAAKX,IAAK,CAC5B,MAAM+D,EAAW8D,EAAiBtH,EAAQP,GAAG,GAAIJ,GACjD,IAAI0I,EAAS/H,EAAQP,GAAG,GACxB,MAAMuI,EAAQ3I,EAAQ+E,oBAAsBZ,EAC5C,GAAIA,EAAS9D,OACX,QAAeC,IAAXoI,EAAsB,CACpB1I,EAAQsF,aACVoD,EAASA,EAAOnG,QAGlB,MAAMqG,EAAS5I,EAAQ6F,wBAAwB1B,EAAUuE,EAAQf,GAG/Dc,EAAME,GAFLC,MAAAA,EAEcF,SACDE,UAAkBF,GAAUE,IAAWF,EAEtCE,EAGAZ,EACbU,EACA1I,EAAQqF,oBACRrF,EAAQwF,yBAGHxF,EAAQmB,yBACjBsH,EAAME,IAAS,GAIrB,IAAKjC,OAAOC,KAAK8B,GAAOpI,OACtB,OAEF,GAAIL,EAAQgF,oBAAqB,CAC/B,MAAM6D,EAAiB,GAEvB,OADAA,EAAe7I,EAAQgF,qBAAuByD,EACvCI,EAET,OAAOJ,GAgLR,SACMK,EAAahD,EAAWiD,EAAeC,GAC9C,MAAMC,EAAoB,GAM1B,GAJAnD,EAAUoD,SAASvB,IACbA,EAAMhG,OAAQgG,EAAMtH,OAAS2I,EAAe3I,UAAY2I,GAAgBC,EAAkBhI,KAAK0G,QAGlGsB,EAAkB5I,OAAS,GAWxB,OAAO,EAXmB,CAC9B,IAAIsH,EAAQ,GACZ,IAAK,IAAIvH,EAAI,EAAGA,EAAI2I,EAAc1I,OAAQD,IAAK,CAE7CuH,GAAS,IADIoB,EAAc3I,GACPsB,QAEtBiG,GAAS,IAAMqB,EACfrB,EAAQA,EAAMhG,OAAO,GACrB,IAAK,IAAIwH,EAAI,EAAGA,EAAIF,EAAkB5I,OAAQ8I,IAC5C,GAAGF,EAAkBE,KAAOxB,EAAO,OAAO,GAU7C,SACMyB,EAAuB5H,EAASpB,GACvC,IAAIiJ,EACAC,EAAS,GACb,IAAK,IAAItI,EAAQZ,EAAGY,EAAQQ,EAAQnB,OAAQW,IAAS,CACnD,IAAIuI,EAAK/H,EAAQR,GACjB,GAAIqI,EACIE,IAAOF,IAAcA,EAAe,SACrC,GAAW,MAAPE,GAAqB,MAAPA,EACrBF,EAAeE,MACZ,CAAA,GAAW,MAAPA,EACP,MAAO,CACLC,KAAMF,EACNtI,MAAOA,GAEK,OAAPuI,IACTA,EAAK,KAEPD,GAAUC,YAILE,EAAiBjI,EAAS0F,EAAK9G,EAAGsJ,GACzC,MAAMC,EAAenI,EAAQoI,QAAQ1C,EAAK9G,GAC1C,IAAoB,IAAjBuJ,EACD,MAAM,IAAIE,MAAMH,GAEhB,OAAOC,EAAezC,EAAI7G,OAAS,QAlOX,SAASmB,EAASxB,GAC5CwB,EAAUA,EAAQsC,QAAO,SAAW,MACpC,MAAMgG,EAAS,IAAI5D,EAAQ,QAC3B,IAAI6D,EAAcD,EACdE,EAAW,GACf,MAAMjB,EAAgB,GACtB,IAAIpB,EAAQ,GAEZ,IAAI,IAAIvH,EAAE,EAAGA,EAAGoB,EAAQnB,OAAQD,IAAI,CAElC,GAAU,MADCoB,EAAQpB,GAIjB,GAAqB,MAAjBoB,EAAQpB,EAAE,GAAY,CACxB,MAAM6J,EAAaR,EAAiBjI,EAAS,IAAKpB,EAAG,8BACrD,IAAIkC,EAAUd,EAAQgB,UAAUpC,EAAE,EAAE6J,GAAY1H,OAEhD,GAAGvC,EAAQmF,eAAe,CACxB,MAAM+E,EAAa5H,EAAQsH,QAAQ,MACjB,IAAfM,IACD5H,EAAUA,EAAQX,OAAOuI,EAAW,IAgBxC,GAZGH,IACDC,EAAWtC,EAAWsC,EAClBhK,EACA+J,EAAYrI,QACZiG,GACD,IACCoC,EAAY1D,UAAwD,IAA7CK,OAAOC,KAAKoD,EAAY1D,UAAUhG,OACf,IAA1CqG,OAAOC,KAAKoD,EAAY3D,OAAO/F,aACnBC,IAAb0J,GAAwC,KAAbA,GAAiBD,EAAYzD,IAAItG,EAAQiF,aAAc+E,GACrFA,EAAW,IAGTlB,EAAa9I,EAAQ8F,UAAWiD,EAAegB,EAAYrI,SAAU,CACvE,MAAMyI,EAAMpB,EAAcA,EAAc1I,OAAS,GAChC8J,EAAI/D,MAAO+D,EAAI/D,MAAM/F,OAAQ,GACrC0J,EAAYrI,SAAW,CAAE,EAAG1B,EAAQiF,cAAezD,EAAQG,OAAOoI,EAAYlJ,WAAa,EAAGT,EAAI2J,EAAYlJ,WAAa,KAGtI8G,EAAQA,EAAMhG,OAAO,EAAGgG,EAAMyC,YAAY,MAE1CL,EAAchB,EAAc1F,MAC5B2G,EAAW,GACX5J,EAAI6J,OACC,GAAqB,MAAjBzI,EAAQpB,EAAE,GACnBA,EAAIqJ,EAAiBjI,EAAS,KAAMpB,EAAG,8BAClC,GAAgC,QAA7BoB,EAAQG,OAAOvB,EAAI,EAAG,GAC9BA,EAAIqJ,EAAiBjI,EAAS,SAAOpB,EAAG,+BACnC,GAAiC,OAA7BoB,EAAQG,OAAOvB,EAAI,EAAG,GAAa,CAC5C,MAAM6J,EAAaR,EAAiBjI,EAAS,IAAKpB,EAAG,0BAGnDA,EAFaoB,EAAQgB,UAAUpC,EAAG6J,GAC1BL,QAAQ,MAAQ,EACpBpI,EAAQoI,QAAQ,KAAMxJ,GAAK,EAE3B6J,OAEF,GAAgC,OAA7BzI,EAAQG,OAAOvB,EAAI,EAAG,GAAa,CAC1C,MAAM6J,EAAaR,EAAiBjI,EAAS,MAAOpB,EAAG,wBAA0B,EAC3EkJ,EAAS9H,EAAQgB,UAAUpC,EAAI,EAAE6J,GAgBvC,GAdGD,IACDA,EAAWtC,EAAWsC,EAClBhK,EACA+J,EAAYrI,QACZiG,GACD,IACCoC,EAAY1D,UAAwD,IAA7CK,OAAOC,KAAKoD,EAAY1D,UAAUhG,OACf,IAA1CqG,OAAOC,KAAKoD,EAAY3D,OAAO/F,aAEnBC,IAAb0J,GAAwC,KAAbA,GAAiBD,EAAYzD,IAAItG,EAAQiF,aAAc+E,GACrFA,EAAW,IAIVhK,EAAQuF,aAAa,CACtB,IAAIK,EAAM8B,EAAW4B,EAAQtJ,EAASA,EAAQuF,aAAcoC,EAAQ,IAAM3H,EAAQuF,cAAc,GAAM,GAAO,GACzGK,IAAKA,EAAM,IACfmE,EAAYzD,IAAItG,EAAQuF,aAAc,CAAE,EAAGvF,EAAQiF,cAAgBW,SAChE,CACH,IAAIA,EAAM8B,EAAW4B,EAAQtJ,EAAS+J,EAAYrI,QAASiG,GAAO,GAAM,GAAO,GAC3E/B,IAAKA,EAAM,IACfmE,EAAYzD,IAAItG,EAAQiF,aAAcW,GAGxCxF,EAAI6J,EAAa,MACb,CACJ,MAAMvH,EAAS0G,EAAuB5H,EAASpB,EAAE,GACjD,IAAIkJ,EAAS5G,EAAO8G,KACpB,MAAMS,EAAavH,EAAO1B,MACpBqJ,EAAiBf,EAAOgB,OAAM,MACpC,IAAIhI,EAAUgH,EACViB,GAA2B,EAM/B,IALsB,IAAnBF,IACD/H,EAAUgH,EAAO3H,OAAO,EAAG0I,GAAgBvG,QAAO,SAAW,IAC7DwF,EAASA,EAAO3H,OAAO0I,EAAiB,IAGvCrK,EAAQmF,eAAe,CACxB,MAAM+E,EAAa5H,EAAQsH,QAAQ,MACjB,IAAfM,IACD5H,EAAUA,EAAQX,OAAOuI,EAAW,GACpCK,EAA2BjI,IAAYI,EAAO8G,KAAK7H,OAAOuI,EAAa,IAwB3E,GAnBIH,GAAeC,GACU,SAAxBD,EAAYrI,UAEbsI,EAAWtC,EAAWsC,EAClBhK,EACA+J,EAAYrI,QACZiG,GACA,IACAoC,EAAY1D,UAAwD,IAA7CK,OAAOC,KAAKoD,EAAY1D,UAAUhG,QACzD,QACYC,IAAb0J,GAAwC,KAAbA,GAAiBD,EAAYzD,IAAItG,EAAQiF,aAAc+E,GACrFA,EAAW,IAIZ1H,IAAYwH,EAAOpI,UACpBiG,GAASA,EAAQ,IAAMrF,EAAUA,GAGhCgH,EAAOjJ,OAAS,GAAKiJ,EAAOc,YAAY,OAASd,EAAOjJ,OAAS,EAAE,CAEjC,MAAhCiC,EAAQA,EAAQjC,OAAS,IAC1BiC,EAAUA,EAAQX,OAAO,EAAGW,EAAQjC,OAAS,GAC7CiJ,EAAShH,GAETgH,EAASA,EAAO3H,OAAO,EAAG2H,EAAOjJ,OAAS,GAG5C,MAAMmK,EAAY,IAAItE,EAAQ5D,GAC3BA,IAAYgH,GAAUiB,IACvBC,EAAUnE,SAAWmC,EAAmBc,EAAQ3B,EAAQ3H,IAE1D2H,EAAQA,EAAMhG,OAAO,EAAGgG,EAAMyC,YAAY,MAE1CL,EAAYvD,SAASgE,OAClB,CAEH,MAAMA,EAAY,IAAItE,EAAS5D,GAC/ByG,EAAc9H,KAAK8I,GAEnBS,EAAU3J,WAAWoJ,EAElB3H,IAAYgH,GAAUiB,IACvBC,EAAUnE,SAAWmC,EAAmBc,EAAQ3B,EAAO3H,IAEzD+J,EAAYvD,SAASgE,GACrBT,EAAcS,EAEhBR,EAAW,GACX5J,EAAI6J,OAGND,GAAYxI,EAAQpB,GAGxB,OAAO0J,EAAO1D,MAAM,ICtSnB,SACMqE,EAASC,EAAK1K,EAAS2H,GAC9B,IAAIgD,EACJ,MAAMC,EAAgB,GACtB,IAAK,IAAIxK,EAAI,EAAGA,EAAIsK,EAAIrK,OAAQD,IAAK,CACnC,MAAMyK,EAASH,EAAItK,GACb0K,EAAWC,EAASF,GAC1B,IAAIG,EAAW,GAIf,GAHwBA,OAAX1K,IAAVqH,EAAgCmD,EACnBnD,EAAQ,IAAMmD,EAE3BA,IAAa9K,EAAQiF,kBACV3E,IAATqK,EAAoBA,EAAOE,EAAOC,GAChCH,GAAQ,GAAKE,EAAOC,OACrB,CAAA,QAAgBxK,IAAbwK,EACP,SACI,GAAGD,EAAOC,GAAU,CAExB,IAAIlF,EAAM6E,EAASI,EAAOC,GAAW9K,EAASgL,GAC9C,MAAMC,EAASC,EAAUtF,EAAK5F,GAE3B6K,EAAOjE,WACRuE,EAAkBvF,EAAKiF,EAAOjE,WAAYoE,EAAUhL,GACjB,IAA5B0G,OAAOC,KAAKf,GAAKvF,aAA8CC,IAA9BsF,EAAI5F,EAAQiF,eAAgCjF,EAAQ+F,qBAEzD,IAA5BW,OAAOC,KAAKf,GAAKvF,SACrBL,EAAQ+F,qBAAsBH,EAAI5F,EAAQiF,cAAgB,GACxDW,EAAM,IAHXA,EAAMA,EAAI5F,EAAQiF,mBAMW3E,IAA5BsK,EAAcE,IACXM,MAAMpF,QAAQ4E,EAAcE,MAC9BF,EAAcE,GAAY,CAAEF,EAAcE,KAE5CF,EAAcE,GAAU7J,KAAK2E,IAIzB5F,EAAQgG,QAAQ8E,EAAUE,EAAUC,GACtCL,EAAcE,GAAY,CAAClF,GAE3BgF,EAAcE,GAAYlF,IAUlC,MAHmB,iBAAT+E,EACLA,EAAKtK,OAAS,IAAGuK,EAAc5K,EAAQiF,cAAgB0F,QAC1CrK,IAATqK,IAAoBC,EAAc5K,EAAQiF,cAAgB0F,GAC5DC,WAGAG,EAASM,GAChB,MAAM1E,EAAOD,OAAOC,KAAK0E,GACzB,IAAK,IAAIjL,EAAI,EAAGA,EAAIuG,EAAKtG,OAAQD,IAAK,CACpC,MAAMmG,EAAMI,EAAKvG,GACjB,GAAW,eAARmG,EAAsB,OAAOA,YAI3B4E,EAAiBE,EAAKC,EAASC,EAAOvL,GAC7C,GAAIsL,EAAS,CACX,MAAM3E,EAAOD,OAAOC,KAAK2E,GACnBvK,EAAM4F,EAAKtG,OACjB,IAAK,IAAID,EAAI,EAAGA,EAAIW,EAAKX,IAAK,CAC5B,MAAMoL,EAAW7E,EAAKvG,GAClBJ,EAAQgG,QAAQwF,EAAUD,EAAQ,IAAMC,GAAU,GAAM,GAC1DH,EAAIG,GAAY,CAAEF,EAAQE,IAE1BH,EAAIG,GAAYF,EAAQE,cAMvBN,EAAUG,EAAKrL,GACtB,MAAMyL,EAAY/E,OAAOC,KAAK0E,GAAKhL,OACnC,SAAkB,IAAdoL,GAAkC,IAAdA,GAAmBJ,EAAIrL,EAAQiF,8BAzFvCwB,EAAMzG,GACtB,OAAOyK,EAAU,CAAChE,GAAOzG,ICgC3B0L,oBA7BgB1L,GACRmG,KAAKnG,QAAO2L,EAAgB3L,GAOhC4L,MAAMpK,EAAQqK,GACV,GAAsB,iBAAZrK,OACJ,CAAA,IAAIA,EAAQsK,SAGd,MAAM,IAAIjC,MAAM,mDAFhBrI,EAAUA,EAAQsK,WAItB,GAAID,EAAiB,EACO,IAArBA,IAA2BA,EAAmB,IAEjD,MAAMnJ,EAASpD,EAAmBkC,EAASqK,GAC3C,IAAe,IAAXnJ,EACF,MAAMmH,MAAK,GAAKnH,EAAOP,IAAIM,OAAOC,EAAOP,IAAIe,QAAQR,EAAOP,IAAIoB,OAGtE,MAAMwI,EAAaC,EAAuBxK,EAAS2E,KAAKnG,SACxD,OAAGmG,KAAKnG,QAAQ8E,oBAAmCxE,IAAlByL,EAAoCA,EAC1DE,EAAUF,EAAe5F,KAAKnG,iBC7B3CR,gBCIG0M,EAASxB,EAAK1K,EAASmM,GAC5B,IAAIC,EAAS,GAETC,EAAc,GACfrM,EAAQsM,QAAUtM,EAAQuM,SAASlM,OAAS,IAC3CgM,ECiCM,KDjCmBrM,EAAQuM,SAASC,OAAOL,IAGrD,IAAK,IAAI/L,EAAI,EAAGA,EAAIsK,EAAIrK,OAAQD,IAAK,CACjC,MAAMyK,EAASH,EAAItK,GACbkC,EAAUmK,EAAS5B,GAEzB,GAAGvI,IAAYtC,EAAQiF,aAAa,CAChCmH,GAAUC,EAAcrM,EAAQ2F,kBAAmBrD,EAASuI,EAAOvI,IACnE,SACE,GAAIA,IAAYtC,EAAQuF,aAAa,CACvC6G,GAAUC,EAAW,YAAexB,EAAOvI,GAAS,GAAGtC,EAAQiF,mBAC/D,SAGJ,IAAIyH,EAAYL,EAAW,IAAO/J,IADnBqK,EAAY9B,EAAOjE,WAAY5G,KAE1C4M,EAAWV,EAASrB,EAAOvI,GAAUtC,EAASmM,EAAQ,GACpDS,GAAgC,IAApBA,EAASvM,SAAiBL,EAAQ6M,kBAIhDT,GAAUM,EAAQ,IAAOE,IAAWP,MAAgB/J,KAHpD8J,GAAUM,EAAW,KAO7B,OAAON,WAGFK,EAASpB,GACd,MAAM1E,EAAOD,OAAOC,KAAK0E,GACzB,IAAK,IAAIjL,EAAI,EAAGA,EAAIuG,EAAKtG,OAAQD,IAAK,CACpC,MAAMmG,EAAMI,EAAKvG,GACjB,GAAW,eAARmG,EAAsB,OAAOA,YAI7BoG,EAAYrB,EAAStL,GAC1B,IAAI4C,EAAU,GACd,GAAG0I,IAAYtL,EAAQkF,iBACnB,IAAK4H,QAAQxB,EACT1I,GAAO,IAAOkK,KAAKnL,OAAO3B,EAAQ+E,oBAAoB1E,YAAYL,EAAQ6F,wBAAwBiH,KAAMxB,EAAQwB,UAGxH,OAAOlK,EAGXmK,WAvDeC,EAAMhN,GACjB,OAAOkM,EAAU,CAACc,GAAOhN,EAAS,IDEtC,MAAMiN,GAAiB,CACrBlI,oBAAqB,KACrBC,qBAAqB,EACrBC,aAAc,QACdC,kBAAkB,EAClBK,cAAc,EACd+G,QAAQ,EACRC,SAAU,KACVM,mBAAmB,EACnBlH,kBAAmB,SAASY,EAAK2G,GAC/B,OAAOA,GAETrH,wBAAyB,SAAS1B,EAAU+I,GAC1C,OAAOA,GAETpI,eAAe,GAGXqI,GAAQ,CACZ,sBACA,sBACA,eACA,mBACA,eACA,SACA,WACA,oBACA,oBACA,0BACA,gBACA,0BAIOC,GAAQpN,GACfmG,KAAKnG,QAAOqN,EAAgBrN,EAASiN,GAAgBE,IACjDhH,KAAKnG,QAAQkF,kBAAoBiB,KAAKnG,QAAQgF,oBAChDmB,KAAKmH,YAAc,WACjB,OAAO,IAGTnH,KAAKoH,cAAgBpH,KAAKnG,QAAQ+E,oBAAoB1E,OACtD8F,KAAKmH,YAAcE,IAGrBrH,KAAKsH,qBAAuBC,GAExBvH,KAAKnG,QAAQsM,QACfnG,KAAKwH,UAAYC,GACjBzH,KAAK0H,WAAa,MAClB1H,KAAK2H,QAAU,OAEf3H,KAAKwH,UAAY,WACf,MAAO,IAETxH,KAAK0H,WAAa,IAClB1H,KAAK2H,QAAU,IAGb3H,KAAKnG,QAAQ6M,mBACf1G,KAAK4H,cAAgBC,GACrB7H,KAAK8H,aAAeC,KAEpB/H,KAAK4H,cAAgBI,GACrBhI,KAAK8H,aAAeG,IAGtBjI,KAAKkI,iBAAmBF,GACxBhI,KAAKmI,gBAAkBF,YAsEhBV,GAAsBa,EAAQhI,EAAK4F,GAC1C,MAAMzJ,EAASyD,KAAKqI,IAAID,EAAQpC,EAAQ,GACxC,YAA0C7L,IAAtCiO,EAAOpI,KAAKnG,QAAQiF,eAA8D,IAA/ByB,OAAOC,KAAK4H,GAAQlO,OAClE8F,KAAK4H,cAAcrL,EAAOkD,IAAKW,EAAK7D,EAAOE,QAASuJ,GAEpDhG,KAAK8H,aAAavL,EAAOkD,IAAKW,EAAK7D,EAAOE,QAASuJ,YAIrDiC,GAAgBxI,EAAKW,EAAK3D,EAASuJ,GAC1C,OAAIvJ,IAAgC,IAArBgD,EAAIgE,QAAQ,KAEvBzD,KAAKwH,UAAUxB,GACf,IACA5F,EACA3D,EACA,IACAgD,EAGA,KACAW,EACAJ,KAAK0H,WAIL1H,KAAKwH,UAAUxB,GACf,IACA5F,EACA3D,EACAuD,KAAK0H,WACLjI,EAEAO,KAAKwH,UAAUxB,GACf,KACA5F,EACAJ,KAAK0H,oBAKFK,GAAkBtI,EAAKW,EAAK3D,EAASuJ,GAC5C,MAAY,KAARvG,EACKO,KAAKmI,gBAAgB1I,EAAKW,EAAK3D,EAASuJ,GAExChG,KAAKwH,UAAUxB,GAAS,IAAM5F,EAAM3D,EAAU,IAAMuD,KAAK0H,oBAK3DM,GAAiBvI,EAAKW,EAAK3D,EAASuJ,GAC3C,OACEhG,KAAKwH,UAAUxB,GACf,IACA5F,EACA3D,EACA,IACAuD,KAAKnG,QAAQ2F,kBAAkBY,EAAKX,GACpC,KACAW,EACAJ,KAAK0H,oBAIAG,GAAmBpI,EAAKW,EAAK3D,EAASuJ,GAC7C,MAAY,KAARvG,EACKO,KAAKkI,iBAAiBzI,EAAKW,EAAK3D,EAASuJ,GAEzChG,KAAKwH,UAAUxB,GAAS,IAAM5F,EAAM3D,EAAU,IAAMuD,KAAK0H,oBAI3DD,GAAUzB,GACjB,OAAOhG,KAAKnG,QAAQuM,SAASC,OAAOL,YAG7BqB,GAAYiB,GACnB,QAAIA,EAAKC,WAAWvI,KAAKnG,QAAQ+E,sBACxB0J,EAAK9M,OAAOwE,KAAKoH,eAjJ5BH,GAAQuB,UAAUC,MAAQ,SAAS5B,GACjC,OAAG7G,KAAKnG,QAAQ8E,cACPiI,EAAmBC,EAAM7G,KAAKnG,UAElCoL,MAAMpF,QAAQgH,IAAS7G,KAAKnG,QAAQ6O,eAAiB1I,KAAKnG,QAAQ6O,cAAcxO,OAAS,IAC1F2M,EAAO,EACJ7G,KAAKnG,QAAQ6O,eAAiB7B,IAG5B7G,KAAKqI,IAAIxB,EAAM,GAAGpH,MAI7BwH,GAAQuB,UAAUH,IAAM,SAASxB,EAAMb,GACrC,IAAIvJ,EAAU,GACVgD,EAAM,GACV,IAAK,IAAIW,KAAOyG,EACd,QAAyB,IAAdA,EAAKzG,SAET,GAAkB,OAAdyG,EAAKzG,GACdX,GAAOO,KAAKwH,UAAUxB,GAAS,IAAM5F,EAAM,IAAMJ,KAAK0H,gBACjD,GAAIb,EAAKzG,aAAgBuI,KAC9BlJ,GAAOO,KAAK4H,cAAcf,EAAKzG,GAAMA,EAAK,GAAI4F,QACzC,GAAyB,iBAAda,EAAKzG,GAAmB,CAExC,MAAMuG,EAAO3G,KAAKmH,YAAY/G,GAC1BuG,EACFlK,GAAW,IAAMkK,EAAO,KAAO3G,KAAKnG,QAAQ6F,wBAAwBiH,EAAM,GAAKE,EAAKzG,IAAQ,IAGxFA,IAAQJ,KAAKnG,QAAQiF,aACvBW,GAAOO,KAAKnG,QAAQ2F,kBAAkBY,EAAK,GAAKyG,EAAKzG,IAErDX,GAAOO,KAAK4H,cAAcf,EAAKzG,GAAMA,EAAK,GAAI4F,QAG7C,GAAIf,MAAMpF,QAAQgH,EAAKzG,IAAO,CAEnC,MAAMwI,EAAS/B,EAAKzG,GAAKlG,OACzB,IAAK,IAAI2O,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAMC,EAAOjC,EAAKzG,GAAKyI,QACH,IAATC,IAGTrJ,GADkB,OAATqJ,EACF9I,KAAKwH,UAAUxB,GAAS,IAAM5F,EAAM,IAAMJ,KAAK0H,WAC7B,iBAAToB,EACT9I,KAAKsH,qBAAqBwB,EAAM1I,EAAK4F,GAErChG,KAAK4H,cAAckB,EAAM1I,EAAK,GAAI4F,UAK7C,GAAIhG,KAAKnG,QAAQgF,qBAAuBuB,IAAQJ,KAAKnG,QAAQgF,oBAAqB,CAChF,MAAMkK,EAAKxI,OAAOC,KAAKqG,EAAKzG,IACtB4I,EAAID,EAAG7O,OACb,IAAK,IAAI2O,EAAI,EAAGA,EAAIG,EAAGH,IACrBpM,GAAW,IAAMsM,EAAGF,GAAK,KAAO7I,KAAKnG,QAAQ6F,wBAAwBqJ,EAAGF,GAAI,GAAKhC,EAAKzG,GAAK2I,EAAGF,KAAO,SAGvGpJ,GAAOO,KAAKsH,qBAAqBT,EAAKzG,GAAMA,EAAK4F,GAIvD,MAAO,CAACvJ,QAASA,EAASgD,IAAKA,IG1IjC,MAAMwJ,GAAS,GCIE,CACfC,UAAW3D,EACX4D,aAAcC,EACdC,WJ8NepC,IGrOEiC,UACbI,GAAYC,SAASC,eAAe,SACpCC,GAAkBF,SAASC,eAAe,gBAC1CE,GAAiBH,SAASC,eAAe,eACzCG,GAAiBJ,SAASC,eAAe,YACzCI,GAAWL,SAASC,eAAe,kBAiDhCK,GAAc3E,EAAKoD,GAC1B,MAAMwB,EAAU,GACVC,EAASxJ,OAAOC,KAAK0E,GAAK8E,QAAM,CAAEjJ,EAAKX,KAC3C,IAAI6J,EAAOhF,MAAMpF,QAAQqF,EAAI9E,WAAe8E,EAAI9E,GAAK,UAAY8E,EAAI9E,GACjE2B,EAAS,GAab,MAXa,WAATkI,GAAkC,OAAb/E,EAAI9E,IAC3B6J,EAAO7J,EAAI4B,OAAO,GAAGkI,cAAgB9J,EAAI+J,MAAM,EAAG/J,EAAIlG,QACtD4P,EAAQhP,KAAK,CAAEoK,IAAKA,EAAI9E,QAAM6J,IAC9BlI,EAAS,KACa,OAAbmD,EAAI9E,KACb6J,EAAO,QAGTA,EAAgB,cAATA,EAAuB,MAAQA,EACtCA,EAAOhF,MAAMpF,QAAQqF,EAAI9E,IAAQ6J,EAAO,KAAOA,EAEzC,GAAIlJ,QAAUX,MAAQ2B,IAASkI,OACpC,IAEH,IAAIG,EAAW,GAUf,OARAN,EAAQ/G,SAAS+F,IACfsB,GACEP,GACE5E,MAAMpF,QAAQiJ,EAAK5D,KAAO4D,EAAK5D,IAAI,GAAK4D,EAAK5D,IAC7C4D,EAAKmB,MACH,UAGF,GAAIG,eAAsB9B,MAASyB,OA7E3CJ,GAAeU,iBAAiB,SAAO,KACrC,IACE,MAAOC,KAACA,EAAIC,MAAEA,YAyBC/F,GACjB,IAAI8F,EAAO,GACPC,GAAQ,EACZ,IACED,EAAO/M,KAAKkI,MAAMjB,GAClB,MAAOgG,GACPF,EAAOrB,GAAOxD,MACZjB,EACA,CACE5F,oBAAqB,GACrBG,kBAAkB,IAEpB,GAEFwL,GAAQ,EAGV,MAAO,MAAED,QAAMC,GA1CWE,CAAUnB,GAAU5M,OAEtCgO,EAAYb,GAAcS,EAAM,sBACtCb,GAAgBkB,cAAc,QAAQC,YAAcF,EAEhDH,GACFd,GAAgBoB,UAAUC,OAAO,cACjCrB,GAAgBoB,UAAU1K,IAAI,aAE9BuJ,GAAemB,UAAUC,OAAO,UAChCpB,GAAeiB,cAAc,QAAQC,YAAcrN,KAAKC,UACtD8M,EACA,KACA,KAGFb,GAAgBoB,UAAUC,OAAO,aACjCrB,GAAgBoB,UAAU1K,IAAI,cAC9BuJ,GAAemB,UAAU1K,IAAI,WAE/B,MAAOqK,aA2DQlM,EAAU,IAC3BsL,GAASe,cAAc,UAAUC,YAActM,EAC/CsL,GAASiB,UAAU1K,IAAI,WACvB4K,aAAaC,IAEbA,GAAeC,YAAU,KACvBrB,GAASiB,UAAUC,OAAO,aACzB,KAjEDI,CAAS,8BAA+BV,EAAElM,eAyD9C,IAAI0M,GAAe","sources":["node_modules/fast-xml-parser/src/validator.js","node_modules/fast-xml-parser/src/util.js","node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","node_modules/strnum/strnum.js","node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","node_modules/fast-xml-parser/src/xmlparser/node2json.js","node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","node_modules/os-browserify/browser.js","main.js","node_modules/fast-xml-parser/src/fxp.js"],"sourcesContent":["'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nconst buildOptions = function(options, defaultOptions, props) {\n  let newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\nexports.buildOptions = buildOptions;\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataTagName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false\n};\n   \nconst props = [\n    'preserveOrder',\n    'attributeNamePrefix',\n    'attributesGroupName',\n    'textNodeName',\n    'ignoreAttributes',\n    'removeNSPrefix',\n    'allowBooleanAttributes',\n    'parseTagValue',\n    'parseAttributeValue',\n    'trimValues',\n    'cdataTagName',\n    'tagValueProcessor',\n    'attributeValueProcessor',\n    'numberParseOptions',\n    'stopNodes',\n    'alwaysCreateTextNode',\n    'isArray',\n];\n  \nconst util = require('../util');\n\nconst buildOptions = function(options) {\n    return util.buildOptions(options, defaultOptions, props);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;\nexports.props = props;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this.attrsMap = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.attrsMap && Object.keys(node.attrsMap).length > 0){\n      this.child.push( { [node.tagname]: node.child, attributes: node.attrsMap });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const negative = match[1];\n            const leadingZeros = match[2];\n            const num = match[3]; //complete num\n            const eNotation = match[4] || match[6];\n            if(leadingZeros.length === 1 && num[0] === \".\") return Number(str);\n            else if(!options.leadingZeros && leadingZeros.length > 0) return str;\n            else return Number(trimmedStr);\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\nmodule.exports = toNumber\n","'use strict';\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\n\n/**\n * @param {string} val\n * @param {object} options\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n */\nfunction parseValue(val, options, tagName, jPath, dontTrim, hasAttributes, isLeafNode) {\n  if (val !== undefined) {\n    if (options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      const newval = options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(options.trimValues){\n        return _parseValue(val, options.parseTagValue, options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return _parseValue(val, options.parseTagValue, options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction _parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      let oldVal = matches[i][4];\n      const aName = options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          \n          const newVal = options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = _parseValue(\n              oldVal,\n              options.parseAttributeValue,\n              options.numberParseOptions\n            );\n          }\n        } else if (options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseToOrderedJsObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  const tagsNodeStack = [];\n  let jPath = \"\";\n\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n        \n        if(currentNode){\n          textData = parseValue(textData\n            , options\n            , currentNode.tagname\n            , jPath\n            ,false\n            , currentNode.attrsMap ? Object.keys(currentNode.attrsMap).length !== 0 : false\n            , Object.keys(currentNode.child).length === 0);\n          if(textData !== undefined &&  textData !== \"\") currentNode.add(options.textNodeName, textData);\n          textData = \"\";\n        }\n\n        if (isItStopNode(options.stopNodes, tagsNodeStack, currentNode.tagname)) { //TODO: namespace\n          const top = tagsNodeStack[tagsNodeStack.length - 1];\n          const stopNode = top.child[ top.child.length -1 ];\n          stopNode[currentNode.tagname] = [ { [options.textNodeName] :xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1) }];\n        }\n        \n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        if(textData){ //store previously collected data as textNode\n          textData = parseValue(textData\n            , options\n            , currentNode.tagname\n            , jPath\n            ,false\n            , currentNode.attrsMap ? Object.keys(currentNode.attrsMap).length !== 0 : false\n            , Object.keys(currentNode.child).length === 0);\n\n          if(textData !== undefined &&  textData !== \"\") currentNode.add(options.textNodeName, textData);\n          textData = \"\";\n        }\n\n        //cdata should be set even if it is 0 length string\n        if(options.cdataTagName){\n          let val = parseValue(tagExp, options, options.cdataTagName, jPath + \".\" + options.cdataTagName, true, false, true);\n          if(!val) val = \"\";\n          currentNode.add(options.cdataTagName, [ { [options.textNodeName] : val } ]);\n        }else{\n          let val = parseValue(tagExp, options, currentNode.tagname, jPath, true, false, true);\n          if(!val) val = \"\";\n          currentNode.add(options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = tagExpWithClosingIndex(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.search(/\\s/);\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n        if(separatorIndex !== -1){//separate tag name and attributes expression\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = parseValue(textData\n              , options\n              , currentNode.tagname\n              , jPath\n              , false\n              , currentNode.attrsMap ? Object.keys(currentNode.attrsMap).length !== 0 : false\n              , false);\n            if(textData !== undefined &&  textData !== \"\") currentNode.add(options.textNodeName, textData);\n            textData = \"\";\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n          \n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, jPath , options);\n          }\n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          // tagsNodeStack.push(currentNode);\n          currentNode.addChild(childNode);\n        }else{//opening tag\n          \n          const childNode = new xmlNode( tagName);\n          tagsNodeStack.push(currentNode);\n          \n          childNode.startIndex=closeIndex; //for further processing\n          \n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, jPath, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child[0];\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {XmlNode[]} tagsNodeStack \n */\nfunction isItStopNode(stopNodes, tagsNodeStack, currentTagName){\n  const matchingStopNodes = [];\n  //filter the list of stopNodes as per current tag\n  stopNodes.forEach( jPath => {\n    if( jPath.substr( jPath.length - currentTagName.length) === currentTagName) matchingStopNodes.push(jPath);\n  });\n\n  if(matchingStopNodes.length > 0){\n    let jPath = \"\";\n    for (let i = 1; i < tagsNodeStack.length; i++) {\n      const node = tagsNodeStack[i];\n      jPath += \".\" + node.tagname;\n    }\n    jPath += \".\" + currentTagName;\n    jPath = jPath.substr(1);\n    for (let i = 0; i < matchingStopNodes.length; i++) {\n      if(matchingStopNodes[i] === jPath) return true;\n    }\n  }else return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.parseToOrderedJsObj = parseToOrderedJsObj;\n","'use strict';\n\nfunction prettify(node, options){\n  return compress( [node], options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj.attributes){\n        assignAttributes( val, tagObj.attributes, newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined) {\n        if(!Array.isArray(compressedObj[property])) {\n          compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \"attributes\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst { parseToOrderedJsObj} = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    constructor(options){\n        this.options = buildOptions(options);\n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedResult = parseToOrderedJsObj(xmlData, this.options);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n//parse Empty Node as self closing node\nconst buildOptions = require('../util').buildOptions;\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attributesGroupName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'format',\n  'indentBy',\n  'suppressEmptyNode',\n  'tagValueProcessor',\n  'attributeValueProcessor',\n  'arrayNodeName', //when array as root\n  'preserveOrder',\n  // 'rootNodeName', //when jsObject have multiple properties on root level\n];\n\nfunction Builder(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attributeValueProcessor(attr, '' + jObj[key]) + '\"';\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          val += this.options.tagValueProcessor(key, '' + jObj[key]);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attributeValueProcessor(Ks[j], '' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(result.val, key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && val.indexOf('<') === -1) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(key, val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Builder;\n","const {EOL} = require('os');\n\nfunction toXml(jObj, options){\n    return arrToStr( [jObj], options, 0);\n}\n\nfunction arrToStr(arr, options, level){\n    let xmlStr = \"\";\n\n    let indentation = \"\";\n    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call\n        indentation = EOL + \"\" + options.indentBy.repeat(level);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n\n        if(tagName === options.textNodeName){\n            xmlStr += indentation + options.tagValueProcessor( tagName, tagObj[tagName]);\n            continue;\n        }else if( tagName === options.cdataTagName){\n            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            continue;\n        }\n        const attStr = attr_to_str(tagObj.attributes, options);\n        let tagStart =  indentation + `<${tagName}${attStr}`;\n        let tagValue = arrToStr(tagObj[tagName], options, level + 1);\n        if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ \n            xmlStr += tagStart + \"/>\"; \n        }else{ \n            //TODO: node with only text value should not parse the text value in next line\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;\n        }\n    }\n    \n    return xmlStr;\n}\n\nfunction propName(obj){\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if(key !== \"attributes\") return key;\n    }\n  }\n\nfunction attr_to_str(attrMap, options){\n    let attrStr = \"\";\n    if(attrMap && !options.ignoreAttributes){\n        for( attr in attrMap){\n            attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}=\"${options.attributeValueProcessor(attr, attrMap[attr])}\"`;\n        }\n    }\n    return attrStr;\n}\n\nmodule.exports = toXml;","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n","import { XMLParser } from \"fast-xml-parser\";\n\nconst parser = new XMLParser();\nconst inputText = document.getElementById(\"input\");\nconst outputTypesText = document.getElementById(\"output-types\");\nconst outputJsonText = document.getElementById(\"output-json\");\nconst generateButton = document.getElementById(\"generate\");\nconst alertBox = document.getElementById(\"alert\");\n\ngenerateButton.addEventListener(\"click\", () => {\n  try {\n    const { json, isXml } = parseText(inputText.value);\n\n    const generated = generateTypes(json, \"GeneratedInterface\");\n    outputTypesText.querySelector(\"code\").textContent = generated;\n\n    if (isXml) {\n      outputTypesText.classList.remove(\"height-100\");\n      outputTypesText.classList.add(\"height-50\");\n\n      outputJsonText.classList.remove(\"hidden\");\n      outputJsonText.querySelector(\"code\").textContent = JSON.stringify(\n        json,\n        null,\n        2\n      );\n    } else {\n      outputTypesText.classList.remove(\"height-50\");\n      outputTypesText.classList.add(\"height-100\");\n      outputJsonText.classList.add(\"hidden\");\n    }\n  } catch (e) {\n    showAlert(`Hey, something went wrong: ${e.message}`);\n  }\n});\n\nfunction parseText(text) {\n  let json = {};\n  let isXml = false;\n  try {\n    json = JSON.parse(text);\n  } catch (e) {\n    json = parser.parse(\n      text,\n      {\n        attributeNamePrefix: \"\",\n        ignoreAttributes: false,\n      },\n      true\n    );\n    isXml = true;\n  }\n\n  return { json, isXml };\n}\n\nfunction generateTypes(obj, name) {\n  const objects = [];\n  const parsed = Object.keys(obj).reduce((str, key) => {\n    let type = Array.isArray(obj[key]) ? typeof obj[key][0] : typeof obj[key];\n    let prefix = \"\";\n\n    if (type === \"object\" && obj[key] !== null) {\n      type = key.charAt(0).toUpperCase() + key.slice(1, key.length);\n      objects.push({ obj: obj[key], type });\n      prefix = \"I\";\n    } else if (obj[key] === null) {\n      type = \"null\";\n    }\n\n    type = type === \"undefined\" ? \"any\" : type;\n    type = Array.isArray(obj[key]) ? type + \"[]\" : type;\n\n    return `${str}\\n  ${key}: ${prefix}${type};`;\n  }, \"\");\n\n  let subTypes = \"\";\n\n  objects.forEach((item) => {\n    subTypes +=\n      generateTypes(\n        Array.isArray(item.obj) ? item.obj[0] : item.obj,\n        item.type\n      ) + \"\\n\\n\";\n  });\n\n  return `${subTypes}interface I${name} {${parsed}\\n}`;\n}\n\nlet alertTimeout = null;\nfunction showAlert(message = \"\") {\n  alertBox.querySelector(\".alert\").textContent = message;\n  alertBox.classList.add(\"visible\");\n  clearTimeout(alertTimeout);\n\n  alertTimeout = setTimeout(() => {\n    alertBox.classList.remove(\"visible\");\n  }, 4000);\n}\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}"],"names":["$cd91eebe8033a981$export$a22775fa5e2eebd9","$2eec7a1140b515bb$export$a5edf3f35b6dd392","$2eec7a1140b515bb$export$ecbd7d678ac4909b","$2eec7a1140b515bb$export$998d7ff9801e90bb","$2eec7a1140b515bb$export$aaa9734c55cb7a19","$2eec7a1140b515bb$var$nameStartChar","$2eec7a1140b515bb$var$nameRegexp","$2eec7a1140b515bb$var$regexName","RegExp","v","options","defaultOptions","props","newOptions","i","length","undefined","string","match","exec","regex","matches","allmatches","startIndex","lastIndex","len","index","push","$cd91eebe8033a981$var$defaultOptions","allowBooleanAttributes","$cd91eebe8033a981$var$props","$cd91eebe8033a981$var$isWhiteSpace","char","$cd91eebe8033a981$var$readPI","xmlData","start","tagname","substr","$cd91eebe8033a981$var$getErrorObject","$cd91eebe8033a981$var$getLineNumberForPosition","$cd91eebe8033a981$var$readCommentAndCDATA","angleBracketsCount","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","$cd91eebe8033a981$var$readAttributeStr","attrStr","value","attrStrStart","isValid","$cd91eebe8033a981$var$validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","afterAmp","$cd91eebe8033a981$var$validateAmpersand","JSON","stringify","map","t","replace","startChar","$cd91eebe8033a981$var$validAttrStrRegxp","attrNames","$cd91eebe8033a981$var$getPositionFromMatch","attrName","$cd91eebe8033a981$var$validateAttrName","hasOwnProperty","re","$cd91eebe8033a981$var$validateNumberAmpersand","count","message","lineNumber","lines","split","$7a74376cfe1c1abd$var$defaultOptions","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataTagName","numberParseOptions","hex","leadingZeros","tagValueProcessor","val","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","$7a74376cfe1c1abd$var$props","$3448deb7c6f63eb7$exports","this","child","attrsMap","add","key","addChild","node","Object","keys","attributes","$10fe84022d1c5a4f$var$hexRegex","$10fe84022d1c5a4f$var$numRegex","$10fe84022d1c5a4f$var$consider","decimalPoint","$10fe84022d1c5a4f$exports","str","assign","trimmedStr","skipLike","test","Number","parseInt","num","$bcd9e21f21057f2d$var$parseValue","jPath","dontTrim","hasAttributes","isLeafNode","newval","$bcd9e21f21057f2d$var$_parseValue","$bcd9e21f21057f2d$var$resolveNameSpace","prefix","charAt","shouldParse","window","parseFloat","$bcd9e21f21057f2d$var$attrsRegx","$bcd9e21f21057f2d$var$buildAttributesMap","attrs","oldVal","aName","newVal","attrCollection","$bcd9e21f21057f2d$var$isItStopNode","tagsNodeStack","currentTagName","matchingStopNodes","forEach","i1","$bcd9e21f21057f2d$var$tagExpWithClosingIndex","attrBoundary","tagExp","ch","data","$bcd9e21f21057f2d$var$findClosingIndex","errMsg","closingIndex","indexOf","Error","xmlObj","currentNode","textData","closeIndex","colonIndex","top","lastIndexOf","separatorIndex","search","shouldBuildAttributesMap","childNode","$256e29da195a82d4$var$compress","arr","text","compressedObj","tagObj","property","$256e29da195a82d4$var$propName","newJpath","isLeaf","$256e29da195a82d4$var$isLeafTag","$256e29da195a82d4$var$assignAttributes","Array","obj","attrMap","jpath","atrrName","propCount","$fe2e07446aaac100$exports","$fe2e07446aaac100$require$buildOptions","parse","validationOption","toString","orderedResult","$fe2e07446aaac100$require$parseToOrderedJsObj","$fe2e07446aaac100$require$prettify","$0c9c20e9e52c1a55$var$arrToStr","level","xmlStr","indentation","format","indentBy","repeat","$0c9c20e9e52c1a55$var$propName","tagStart","$0c9c20e9e52c1a55$var$attr_to_str","tagValue","suppressEmptyNode","attr","$0c9c20e9e52c1a55$exports","jObj","$fdd86cbf87531a86$var$defaultOptions","a","$fdd86cbf87531a86$var$props","$fdd86cbf87531a86$var$Builder","$fdd86cbf87531a86$require$buildOptions","isAttribute","attrPrefixLen","$fdd86cbf87531a86$var$isAttribute","processTextOrObjNode","$fdd86cbf87531a86$var$processTextOrObjNode","indentate","$fdd86cbf87531a86$var$indentate","tagEndChar","newLine","buildTextNode","$fdd86cbf87531a86$var$buildEmptyTextNode","buildObjNode","$fdd86cbf87531a86$var$buildEmptyObjNode","$fdd86cbf87531a86$var$buildTextValNode","$fdd86cbf87531a86$var$buildObjectNode","buildTextValNode","buildObjectNode","object","j2x","name","startsWith","prototype","build","arrayNodeName","Date","arrLen","j","item","Ks","L","$f976bf797198355a$var$parser","XMLParser","XMLValidator","$cd91eebe8033a981$exports","XMLBuilder","$f976bf797198355a$var$inputText","document","getElementById","$f976bf797198355a$var$outputTypesText","$f976bf797198355a$var$outputJsonText","$f976bf797198355a$var$generateButton","$f976bf797198355a$var$alertBox","$f976bf797198355a$var$generateTypes","objects","parsed","reduce","type","toUpperCase","slice","subTypes","addEventListener","json","isXml","e","$f976bf797198355a$var$parseText","generated","querySelector","textContent","classList","remove","clearTimeout","$f976bf797198355a$var$alertTimeout","setTimeout","$f976bf797198355a$var$showAlert"],"version":3,"file":"index.cedb3b0e.js.map"}
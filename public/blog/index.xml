<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on /dump</title>
    <link>http://blog.danielcefram.com/blog/</link>
    <description>Recent content in Blogs on /dump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;http://danielcefram.com&#34;&gt;Daniel Cefram&lt;/a&gt; 2017</copyright>
    <lastBuildDate>Tue, 18 Sep 2018 09:31:25 +0800</lastBuildDate>
    
	<atom:link href="http://blog.danielcefram.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Image Resizing in CLI</title>
      <link>http://blog.danielcefram.com/blog/image-resizing-cli/</link>
      <pubDate>Tue, 18 Sep 2018 09:31:25 +0800</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/image-resizing-cli/</guid>
      <description>For the past few weeks, I was looking for a new compiled language that I can make use of for my tools as I grew tired of Go language&amp;rsquo;s verbosity. I tried learning Rust, but as I expected, it was more suited for system projects, and found out how much pain it could be for smaller tools due to how strict the compiler is.
With that, I eyed for both Nim and Crystal language, with the latter prevailing as my language of choice for my personal tools.</description>
    </item>
    
    <item>
      <title>Stuffs that I dislike about Go</title>
      <link>http://blog.danielcefram.com/blog/stuffs-that-i-dislike-about-go/</link>
      <pubDate>Sat, 04 Nov 2017 21:31:38 +0800</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/stuffs-that-i-dislike-about-go/</guid>
      <description>Error handling I should admit that I used to like Go&amp;rsquo;s idea of error handling, wherein errors are treated as values. I also thought that forcing developers to handle each possible error points immediately was a good thing, rather than moving all of the code into a try catch block.
But recently, while working on one of our project&amp;rsquo;s internal tools, I came to grow tired of Go&amp;rsquo;s error handling.</description>
    </item>
    
    <item>
      <title>Installing Sublime in OpenSUSE</title>
      <link>http://blog.danielcefram.com/blog/installing-sublime-in-opensuse/</link>
      <pubDate>Sat, 16 Sep 2017 16:21:10 +0800</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/installing-sublime-in-opensuse/</guid>
      <description>My daily driver nowadays is Gogland , and I sometimes use VSCode if ever I need to open 2 or more projects at the same time (Gogland eats up way too much RAM).
In my previous post, I stated that I switched to VSCode away from Sublime, but since Gogland got better JS support, like configuring the root path so that it would match how my webpack config handles import paths, and with the fact that Gogland got better tooling when it came to coding in Go Language, I&amp;rsquo;m now using it as my primary editor.</description>
    </item>
    
    <item>
      <title>Alternative to dangerously set inner html in React</title>
      <link>http://blog.danielcefram.com/blog/alternative-to-dangerouslysetinnerhtml/</link>
      <pubDate>Wed, 13 Sep 2017 00:34:15 +0800</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/alternative-to-dangerouslysetinnerhtml/</guid>
      <description>Scenarios wherein you need to render a string with html tags in it would still require you to use dangerouslySetInnerHTML&amp;hellip; so if your problem is as such, then I guess there&amp;rsquo;s still no better way to parse strings with html tags.
As for scenarios wherein we would need to pass a content to a reusable component through attributes, then this would work. A simple example might help right?
The scenario In this example, we&amp;rsquo;ll be using ReactTooltip as our reusable component.</description>
    </item>
    
    <item>
      <title>Migrated to Hugo</title>
      <link>http://blog.danielcefram.com/blog/migrated-to-hugo/</link>
      <pubDate>Mon, 11 Sep 2017 14:46:53 +0800</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/migrated-to-hugo/</guid>
      <description>I&amp;rsquo;ve been using Ghost for quite sometime already, and my only opensource project in github that was starred by non-collegues is a Ghost theme that I made for my blog. But times has changed, which some of you who are avid readers of my blog might have noticed, my financial situation requires me to be a little more stringent&amp;hellip; which also meant that I had to downgrade my VPS.
Ghost did well as a blogging platform, but the reasources it consumed, particularly RAM, was just too much.</description>
    </item>
    
    <item>
      <title>My notes in setting up Arch</title>
      <link>http://blog.danielcefram.com/blog/my-notes-in-setting-up-arch/</link>
      <pubDate>Mon, 29 May 2017 06:26:05 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/my-notes-in-setting-up-arch/</guid>
      <description>I&amp;rsquo;m aware that there are many many articles on how to setup Arch Linux, with the official Wiki as the best one to check out first.
I just documented my experience on setting up Arch with the objective that I should be able replicate the same setup and environment on other Computers if needed.
Install Reflector This is so that we would use the fastest server in our mirrorlist</description>
    </item>
    
    <item>
      <title>When distro hopping...</title>
      <link>http://blog.danielcefram.com/blog/when-distro-hopping/</link>
      <pubDate>Mon, 24 Apr 2017 11:21:03 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/when-distro-hopping/</guid>
      <description>So I&amp;rsquo;ve been distro hopping for the past couple of weeks, and I always googled how to format my boot drive and then write an ISO to my flash drive as bootable (boot-able, I&amp;rsquo;m getting a wrong spelling indicator with the &amp;ldquo;bootable&amp;rdquo; word XD) USB drive. Since I did that very frequently lately, I thought of just adding a blog post that would serve as my notes/reminder.
Formatting Boot-able USB You won&amp;rsquo;t be able to detect a boot-able flash drive in Linux (ie.</description>
    </item>
    
    <item>
      <title>Looping in successive order with Async calls</title>
      <link>http://blog.danielcefram.com/blog/looping-in-successive-order-with-async-calls/</link>
      <pubDate>Sat, 25 Mar 2017 07:38:14 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/looping-in-successive-order-with-async-calls/</guid>
      <description>Let&amp;rsquo;s first define an example problem to better understand the issue we have with normal looping:
For example, we have an array of post IDs that we would fetch and then print it out on the console
const ids = [1, 2, 3, 4]; for (var id of ids) { fetch(`${API_URL}/${id}`).then(() =&amp;gt; { console.log(id, response.results); }); }  The output of the above code would be different results with the same id, wherein the id printed would be the last number</description>
    </item>
    
    <item>
      <title>Easily turn your app to Progressive Web Apps through webpack plugins</title>
      <link>http://blog.danielcefram.com/blog/easily-turn-your-app-to-progressive-web-apps-through-webpack-plugins/</link>
      <pubDate>Sat, 18 Mar 2017 03:26:00 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/easily-turn-your-app-to-progressive-web-apps-through-webpack-plugins/</guid>
      <description>If ever we wanted our WebApp available even if the user does not have any internet connection, we would need to use service workers. But the thing with service workers is that they&amp;rsquo;re not &amp;ldquo;easy&amp;rdquo; to implement. It&amp;rsquo;s a good thing though that the GoogleChrome team released a node module that would generate the service worker code for your project: sw-precache.
You can use that node module in your gulp file when building/bundling your app.</description>
    </item>
    
    <item>
      <title>Responsive web designs through EQCSS</title>
      <link>http://blog.danielcefram.com/blog/responsive-web-designs-through-eqcss/</link>
      <pubDate>Sat, 04 Mar 2017 08:13:23 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/responsive-web-designs-through-eqcss/</guid>
      <description>EQCSS allows us to style elements based on the element&amp;rsquo;s state. It is similar to CSS&amp;rsquo; media queries, but with the added feature to style elements based on the element&amp;rsquo;s dimension and contents, and not just based on the browser&amp;rsquo;s width and height.
This got me interested since my previous project&amp;rsquo;s longstanding issue was with how the app should look like based on a combination of two factors: The window&amp;rsquo;s size and the number of elements inside the container.</description>
    </item>
    
    <item>
      <title>Using JSON parse and stringify to clone objects</title>
      <link>http://blog.danielcefram.com/blog/object-assign-vs-json-parse/</link>
      <pubDate>Sat, 25 Feb 2017 05:50:12 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/object-assign-vs-json-parse/</guid>
      <description>Immutability is important. The stackoverflow article that I just linked would explain why immutability is important.
I am accustomed to using Immutable.js at work, but when I came across an ancient project that didn&amp;rsquo;t make sense to add a new library just for using immutable objects, I had to resort to Object.assign.
But the problem with Object.assign though is that you cannot use it to modify deep properties.
Take this for example:</description>
    </item>
    
    <item>
      <title>Using datasets to avoid inline arrow functions</title>
      <link>http://blog.danielcefram.com/blog/using-datasets-to-avoid-inline-arrow-functions/</link>
      <pubDate>Sat, 18 Feb 2017 08:10:44 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/using-datasets-to-avoid-inline-arrow-functions/</guid>
      <description>Adding an inline anonymous/arrow function in React is not recommended due to the nature of how react behaves. The render method would always be called each time a state or property is updated, which would then create a new function if we are using inline arrow functions, and then this would force the GC (garbage collector) to clean the previous arrow function.
render() { // Not good :\  return &amp;lt;div onClick={e =&amp;gt; console.</description>
    </item>
    
    <item>
      <title>A New Start</title>
      <link>http://blog.danielcefram.com/blog/a-new-start/</link>
      <pubDate>Sun, 01 Jan 2017 07:49:00 +0000</pubDate>
      
      <guid>http://blog.danielcefram.com/blog/a-new-start/</guid>
      <description>I decided to restart my blog yet again, and this time I&amp;rsquo;m planning to just document my thoughts at least every month. I&amp;rsquo;m looking forward to getting this goal done, specially with the fact that I&amp;rsquo;m getting married in 2~3 weeks time!&amp;hellip; Which means that I might actually have more things to write about :D
A lot has happened since last year. I clocked a lot of extra hours of work, for the preparation of my wedding.</description>
    </item>
    
  </channel>
</rss>